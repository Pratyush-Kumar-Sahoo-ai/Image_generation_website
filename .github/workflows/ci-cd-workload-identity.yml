name: CI/CD Pipeline (Workload Identity) - DISABLED

# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]

permissions:
  contents: 'read'
  id-token: 'write'

env:
  REGION: us-central1
  PROJECT_ID: velvety-arc-470617-v8

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --watchAll=false --passWithNoTests
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend for production
      run: |
        cd frontend
        npm run build:prod
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions/providers/github'
        service_account: 'lumina-cicd@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'
    
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker
    
    - name: Deploy to Cloud Run
      run: |
        # Build and push Docker image using our existing Dockerfile
        docker build -t gcr.io/${{ env.PROJECT_ID }}/lumina-frontend:${{ github.sha }} .
        docker push gcr.io/${{ env.PROJECT_ID }}/lumina-frontend:${{ github.sha }}
        
        # Deploy to Cloud Run
        gcloud run deploy lumina-frontend \
          --image gcr.io/${{ env.PROJECT_ID }}/lumina-frontend:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars "NODE_ENV=production"
    
    - name: Get deployment URL
      run: |
        DEPLOY_URL=$(gcloud run services describe lumina-frontend --region=${{ env.REGION }} --format='value(status.url)')
        echo "Deployed to: $DEPLOY_URL"
        echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV
    
    - name: Comment deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('ðŸš€ Deployment successful')
          );
          
          const commentBody = `ðŸš€ **Deployment successful!**
          
          Your Lumina frontend has been deployed to: **${{ env.DEPLOY_URL }}**
          
          - **Commit**: \`${{ github.sha }}\`
          - **Branch**: \`${{ github.ref_name }}\`
          - **Deployed at**: ${new Date().toISOString()}
          
          The frontend is now live and ready to use! ðŸŽ¨`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
          } 